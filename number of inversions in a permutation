#include <iostream>
using namespace std;

const int MAX_N = 1e6 + 1;

int permutation[MAX_N], auxiliary[MAX_N];
long long inversionCount = 0;

void mergeF(int left, int mid, int right) {
    int i = left, j = mid + 1, k = left;
    while (i <= mid && j <= right) {
        if (permutation[i] <= permutation[j]) {
            auxiliary[k++] = permutation[i++];
        } else {
            auxiliary[k++] = permutation[j++];
            inversionCount += mid - i + 1;
        }
    }
    while (i <= mid) {
        auxiliary[k++] = permutation[i++];
    }
    while (j <= right) {
        auxiliary[k++] = permutation[j++];
    }
    for (int l = left; l <= right; l++) {
        permutation[l] = auxiliary[l];
    }
}

void mergeSort(int left, int right) {
    if (left < right) {
        int mid = (left + right) / 2;
        mergeSort(left, mid);
        mergeSort(mid + 1, right);
        mergeF(left, mid, right);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> permutation[i];
    }
    mergeSort(1, n);
    cout << inversionCount << "\n";

    return 0;
}
